---
alwaysApply: true
description: "Node.js compatibility and version-specific syntax requirements"
---
# Node.js Compatibility Standards

**Node.js Version Requirements: 14.0.0+**

MCF CLI targets Node.js 14.0.0+ and must maintain compatibility across versions.

## Import Assertions Syntax

**Use modern import assertions for JSON imports:**

```javascript
// ✅ CORRECT: Modern syntax (Node.js 16.14.0+)
import pkg from '../package.json' with { type: 'json' };

// ❌ WRONG: Legacy assert syntax (deprecated)
import pkg from '../package.json' assert { type: 'json' };
```

## Node.js Version Detection

Always check Node.js version at runtime:

```javascript
// ✅ CORRECT: Version checking
const nodeVersion = process.versions.node;
const majorVersion = parseInt(nodeVersion.split('.')[0]);

if (majorVersion < 14) {
  console.error('MCF CLI requires Node.js 14.0.0 or higher');
  process.exit(1);
}
```

## Cross-Platform Path Handling

Use Node.js built-in `path` module for cross-platform compatibility:

```javascript
// ✅ CORRECT: Cross-platform paths
import path from 'path';

const configPath = path.join(process.cwd(), '.mcf', 'config.json');
const binPath = path.join(__dirname, '..', 'bin', 'mcf.js');
```

## Environment Variables

Follow Node.js environment variable conventions:

```javascript
// ✅ CORRECT: Environment variable access
const isDebug = process.env.DEBUG === 'true';
const profile = process.env.MCF_PROFILE || 'default';
const nodeEnv = process.env.NODE_ENV || 'development';
```

## Process Management

Handle child processes safely across platforms:

```javascript
// ✅ CORRECT: Cross-platform process spawning
import { spawn } from 'child_process';

const child = spawn('claude', args, {
  stdio: 'inherit',
  env: { ...process.env, ...options.environment },
  // Use shell: true on Windows for .cmd/.bat files
  shell: process.platform === 'win32'
});
```